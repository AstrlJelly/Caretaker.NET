using System;
using System.Reflection;
using System.Threading;
using System.Threading.Tasks;
using Discord;
using Discord.Commands;
using Discord.WebSocket;
using Newtonsoft.Json;

using CaretakerNET.Games;

namespace CaretakerNET
{
    // Root myDeserializedClass = JsonConvert.DeserializeObject<Root>(myJsonResponse);
    public class Chain
    {
        public ITextChannel? channel;
        public string? current;
        public int chainLength;
        public string? prevChain;
        public string? lastChainer;
        public int autoChain;
    }

    public class Convo
    {
        public ITextChannel? convoChannel;
        public ITextChannel? replyChannel;
    }

    public class Count
    {
        public ITextChannel? channel;
        public int current;
        public int prevNumber;
        public int highestNum;
        public string? lastCounter;
    }

    public class SlowMode(ITextChannel? channel, int timer)
    {
        public ITextChannel? channel = channel;
        public int timer = timer;
    }

    public class ServerPersist
    {
        // generated by bing ai. check if this actually works, and try to understand it
        // public static void UpdateProperties<T>(T from, T to)
        // {
        //     // Get the type of the class
        //     Type t = typeof(T);
        //     // Get the public instance properties of the class
        //     PropertyInfo[] props = t.GetProperties(BindingFlags.Public | BindingFlags.Instance);
        //     // Loop through each property
        //     foreach (PropertyInfo p in props)
        //     {
        //         // Check if the property can be read and written
        //         if (!p.CanRead || !p.CanWrite) continue;
        //         // Get the value of the property from the updated class
        //         object val = p.GetGetMethod().Invoke(from, null);
        //         // Set the value of the property to the existing object
        //         p.GetSetMethod().Invoke(to, [val]);
        //     }
        // }

        // public Dictionary<string, dynamic> CommandData;
        public Count Count = new();
        public Chain Chain = new();
        public Convo Convo = new();
        public SlowMode[] SlowModes = [];
        public ConnectFour ConnectFour = new();

        // public Persist() {
        //     // CommandData = [];
        //     Count = new();
        //     Chain = new();
        //     Convo = new();
        //     SlowModes = [];
        // }
    }
}
