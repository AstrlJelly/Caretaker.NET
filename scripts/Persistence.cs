using System;
using System.Reflection;
using System.Threading;
using System.Threading.Tasks;
using Discord;
using Discord.Commands;
using Discord.WebSocket;
using Newtonsoft.Json;

using CaretakerNET.Games;
using CaretakerNET.Core;

namespace CaretakerNET
{
    public static class Persist
    {
        const string SERVERPATH = "./persist/server.json";
        const string USERPATH   = "./persist/user.json";

        public static async Task SaveServers(this Dictionary<ulong, ServerPersist> dictionary) => await Save(SERVERPATH, dictionary);
        public static async Task SaveUsers(this Dictionary<ulong, UserPersist> dictionary)     => await Save(USERPATH, dictionary);

        public static async Task<Dictionary<ulong, ServerPersist>> LoadServers() => await Load<Dictionary<ulong, ServerPersist>>(SERVERPATH);
        public static async Task<Dictionary<ulong, UserPersist>>   LoadUsers()   => await Load<Dictionary<ulong, UserPersist>>(USERPATH);

        private static async Task Save<T>(string path, Dictionary<ulong, T> objectToSave)
        {
            Caretaker.LogInfo($"Start saving to {path}...", true);
            string? serializedDict = JsonConvert.SerializeObject(objectToSave);
            await File.WriteAllTextAsync(path, serializedDict);
            Caretaker.LogInfo("Saved!", true);
        }

        // tells the compiler that T always implements new(), so that i can construct a default dictionary. i love C#
        private static async Task<T> Load<T>(string path) where T : new()
        {
            Caretaker.LogInfo($"Start loading from {path}...", true);
            var jsonFileStr = await File.ReadAllTextAsync(path);
            // Caretaker.LogDebug("jsonFileStr : " + jsonFileStr);
            if (!string.IsNullOrEmpty(jsonFileStr)) {
                try {
                    var deserializedDict = JsonConvert.DeserializeObject<T>(jsonFileStr);
                    if (deserializedDict != null) {
                        // Caretaker.LogTemp("deserializedDict : " + deserializedDict);
                        Caretaker.LogInfo("Loaded!", true);
                        return deserializedDict;
                    } else {
                        throw new Exception($"Load (\"{path}\") failed!");
                    }
                } catch (System.Exception err) {
                    Caretaker.LogError(err, true);
                    throw;
                }
            } else {
                return new();
            }
        }
    }

    public class ServerPersist
    {
        public class Chain
        {
            public ITextChannel? channel;
            public string? current;
            public int chainLength;
            public string? prevChain;
            public string? lastChainer;
            public int autoChain;
        }

        public class Convo
        {
            public ITextChannel? convoChannel;
            public ITextChannel? replyChannel;
        }

        public class Count
        {
            public ITextChannel? channel;
            public int current;
            public int prevNumber;
            public int highestNum;
            public string? lastCounter;
        }

        public class SlowMode(ITextChannel? channel, int timer)
        {
            public ITextChannel? channel = channel;
            public int timer = timer;
        }
        // generated by bing ai. check if this actually works, and try to understand it
        public static void CheckClassVariables(object obj)
        {
            Type type = obj.GetType();
            FieldInfo[] fields = type.GetFields(BindingFlags.Instance | BindingFlags.NonPublic | BindingFlags.Public);
            foreach (FieldInfo field in fields)
            {
                if (field.FieldType.IsClass && !field.FieldType.IsArray)
                {
                    CheckClassVariables(field.GetValue(obj));
                }
                else if (field.FieldType.IsValueType && !field.FieldType.IsPrimitive && !field.FieldType.IsEnum)
                {
                    if (field.GetValue(obj) == null)
                    {
                        field.SetValue(obj, Activator.CreateInstance(field.FieldType));
                    }
                }
            }
        }

        // public Dictionary<string, dynamic> CommandData;
        public Count count = new();
        public Chain chain = new();
        public Convo convo = new();
        public List<SlowMode> slowModes = [];
        public ConnectFour? connectFour = null;

        // public Persist() {
        //     // CommandData = [];
        //     Count = new();
        //     Chain = new();
        //     Convo = new();
        //     SlowModes = [];
        // }
    }
    public class UserPersist()
    {
        public class Item(string name, string desc, float price)
        {
            public string name = name;
            public string desc = desc;
            public float price = price;
        }

        public List<Item> inventory = [];
        public long timeout = 0;
    }
}
